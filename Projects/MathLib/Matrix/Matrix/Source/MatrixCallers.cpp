///////////////////////////////////////////////////////////////////////////////////
// COPYRIGHT 2015 KovachTechnologies LLC
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. All advertising materials mentioning features or use of this software
//    must display the following acknowledgement:
//    This product includes software developed by the Kovach Technologies, LLC.
// 4. Neither the name of the Kovach Technologies, LLC nor the
//    names of its contributors may be used to endorse or promote products
//    derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY Kovach Technologies, LLC AS IS AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL Kovach Technologies, LLC BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// AUTHOR : Daniel Kovach
// DATE : 2015-12-30 10:19:06.739857
///////////////////////////////////////////////////////////////////////////////////
#include "MatrixCallers.h"

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * MatrixConstructor( void )
{
	return new MathLib::Matrix::Matrix< double >();
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * MatrixConstructorFromMatrix( MathLib::Matrix::Matrix< double > * m_ptr )
{
	return new MathLib::Matrix::Matrix< double >( * m_ptr );
}

///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * MatrixConstructorFromArray( double * values,
	unsigned int rows, unsigned int cols )
{
	return new MathLib::Matrix::Matrix< double >( values, rows, cols );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API void MatrixDestructor( MathLib::Matrix::Matrix< double > * m_ptr )
{
	assert( m_ptr );
	delete m_ptr;
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API void GetMatrixFromFile( MathLib::Matrix::Matrix< double > * m_ptr, const char * filename )
{
	assert( m_ptr );
	ifstream input( filename );
	m_ptr->GetMatrix( & input );
	input.close();
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API void PutMatrixToFile( MathLib::Matrix::Matrix< double > * m_ptr, const char * filename )
{
	assert( m_ptr );
	ofstream output( filename );
	m_ptr->PutMatrix( & output );
	output.close();
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API unsigned int GetMatrixRows( MathLib::Matrix::Matrix< double > * m_ptr )
{
	assert( m_ptr );
	return m_ptr->GetRows();
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API unsigned int GetMatrixColumns( MathLib::Matrix::Matrix< double > * m_ptr )
{
	assert( m_ptr );
	return m_ptr->GetColumns();
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API unsigned int GetMatrixSize( MathLib::Matrix::Matrix< double > * m_ptr )
{
	assert( m_ptr );
	return m_ptr->Size();
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API double MatrixAt( MathLib::Matrix::Matrix< double > * m_ptr, unsigned int row, unsigned int col )
{
	assert( m_ptr );
	return m_ptr->At( row, col );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API void MatrixReverse( MathLib::Matrix::Matrix< double > * m_ptr )
{
	assert( m_ptr );
	m_ptr->Reverse();
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API void ConvertMatrixToArray( MathLib::Matrix::Matrix< double > * m_ptr, double * values, unsigned int size_values )
{
	assert( m_ptr );
	m_ptr->Convert( values, size_values );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API void PrintMatrix( MathLib::Matrix::Matrix< double > * m_ptr )
{
	std::cout << * m_ptr;
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * AddMatrixConstant( MathLib::Matrix::Matrix< double > * m_ptr, double value )
{
	assert( m_ptr );
	return new MathLib::Matrix::Matrix< double >( * m_ptr + value );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * AddMatrixMatrix( MathLib::Matrix::Matrix< double > * m_ptr1, 
	MathLib::Matrix::Matrix< double > * m_ptr2 )
{
	assert( m_ptr1 );
	assert( m_ptr2 );
	return new MathLib::Matrix::Matrix< double >( * m_ptr1 + * m_ptr2 );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * SubMatrixConstant( MathLib::Matrix::Matrix< double > * m_ptr, double value )
{
	assert( m_ptr );
	return new MathLib::Matrix::Matrix< double >( * m_ptr - value );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * SubMatrixMatrix( MathLib::Matrix::Matrix< double > * m_ptr1, 
	MathLib::Matrix::Matrix< double > * m_ptr2 )
{
	assert( m_ptr1 );
	assert( m_ptr2 );
	return new MathLib::Matrix::Matrix< double >( * m_ptr1 - * m_ptr2 );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * MulMatrixConstant( MathLib::Matrix::Matrix< double > * m_ptr, double value )
{
	assert( m_ptr );
	return new MathLib::Matrix::Matrix< double >( * m_ptr * value );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * MulMatrixMatrix( MathLib::Matrix::Matrix< double > * m_ptr1,
	MathLib::Matrix::Matrix< double > * m_ptr2 )
{
	assert( m_ptr1 );
	assert( m_ptr2 );
	return new MathLib::Matrix::Matrix< double >( * m_ptr1 * * m_ptr2 );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API void MatrixAddColumns( MathLib::Matrix::Matrix< double > * m_ptr, 
	double multiple, unsigned int index1, unsigned int index2 )
{
	MathLib::Matrix::Operations::AddColumns( * m_ptr, multiple, index1, index2 );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API void MatrixAddRows( MathLib::Matrix::Matrix< double > * m_ptr, 
	double multiple, unsigned int index1, unsigned int index2 )
{
	MathLib::Matrix::Operations::AddRows( * m_ptr, multiple, index1, index2 );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API double MatrixDotColumns( MathLib::Matrix::Matrix< double > * m_ptr, unsigned int index1, unsigned int index2 )
{
	MathLib::Matrix::Operations::DotColumns( * m_ptr, index1, index2 );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API double MatrixDotRows( MathLib::Matrix::Matrix< double > * m_ptr, unsigned int index1, unsigned int index2 )
{
	MathLib::Matrix::Operations::DotRows( * m_ptr, index1, index2 );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API double MatrixMaxInRow( MathLib::Matrix::Matrix< double > * m_ptr, unsigned int index )
{
	return MathLib::Matrix::Operations::MaxInRow( * m_ptr, index );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API double MatrixMinInRow( MathLib::Matrix::Matrix< double > * m_ptr, unsigned int index )
{
	return MathLib::Matrix::Operations::MinInRow( * m_ptr, index );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API double MatrixMaxInColumn( MathLib::Matrix::Matrix< double > * m_ptr, unsigned int index )
{
	return MathLib::Matrix::Operations::MaxInColumn( * m_ptr, index );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API double MatrixMinInColumn( MathLib::Matrix::Matrix< double > * m_ptr, unsigned int index )
{
	return MathLib::Matrix::Operations::MinInColumn( * m_ptr, index );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * MatrixPSD( MathLib::Matrix::Matrix< double > * m_ptr )
{
	return new MathLib::Matrix::Matrix< double >( MathLib::Matrix::Fourier::PSD( * m_ptr ) );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * MatrixDFT( MathLib::Matrix::Matrix< double > * m_ptr )
{
	return new MathLib::Matrix::Matrix< double >( MathLib::Matrix::Fourier::DFT( * m_ptr ) );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API void MatrixNormalizeByRow( MathLib::Matrix::Matrix< double > * m_ptr )
{
	MathLib::Matrix::Statistics::NormalizeByRow( * m_ptr );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API void MatrixNormalizeByColumn( MathLib::Matrix::Matrix< double > * m_ptr )
{
	MathLib::Matrix::Statistics::NormalizeByColumn( * m_ptr );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * MatrixMax( MathLib::Matrix::Matrix< double > * m_ptr )
{
	return new MathLib::Matrix::Matrix< double >( MathLib::Matrix::Statistics::Max( * m_ptr ) );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * MatrixMin( MathLib::Matrix::Matrix< double > * m_ptr )
{
	return new MathLib::Matrix::Matrix< double >( MathLib::Matrix::Statistics::Min( * m_ptr ) );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * MatrixMean( MathLib::Matrix::Matrix< double > * m_ptr )
{
	return new MathLib::Matrix::Matrix< double >( MathLib::Matrix::Statistics::Mean( * m_ptr ) );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * MatrixStandardDeviation( MathLib::Matrix::Matrix< double > * m_ptr )
{
	return new MathLib::Matrix::Matrix< double >( MathLib::Matrix::Statistics::StdDev( * m_ptr ) );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * MatrixVariance( MathLib::Matrix::Matrix< double > * m_ptr )
{
	return new MathLib::Matrix::Matrix< double >( MathLib::Matrix::Statistics::Variance( * m_ptr ) );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * MatrixCorrelation( MathLib::Matrix::Matrix< double > * m_ptr1,
	MathLib::Matrix::Matrix< double > * m_ptr2 )
{
	return new MathLib::Matrix::Matrix< double >( MathLib::Matrix::Statistics::Correlation( * m_ptr1, * m_ptr2 ) );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * MatrixCrossCorrelation( MathLib::Matrix::Matrix< double > * m_ptr1,
	MathLib::Matrix::Matrix< double > * m_ptr2 )
{
	return new MathLib::Matrix::Matrix< double >( MathLib::Matrix::Statistics::CrossCorrelation( * m_ptr1, * m_ptr2 ) );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * MatrixCovariance( MathLib::Matrix::Matrix< double > * m_ptr1,
	MathLib::Matrix::Matrix< double > * m_ptr2 )
{
	return new MathLib::Matrix::Matrix< double >( MathLib::Matrix::Statistics::Covariance( * m_ptr1, * m_ptr2 ) );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * MatrixPreprocessorNormalizeByRow( MathLib::Matrix::Matrix< double > * m_ptr )
{
	return new MathLib::Matrix::Matrix< double >( MathLib::Matrix::Preprocessor::NormalizeByRow( * m_ptr ) );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * MatrixPreprocessorNormalizeByColumn( MathLib::Matrix::Matrix< double > * m_ptr )
{
	return new MathLib::Matrix::Matrix< double >( MathLib::Matrix::Preprocessor::NormalizeByColumn( * m_ptr ) );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * MatrixPreprocessorMean( MathLib::Matrix::Matrix< double > * m_ptr )
{
	return new MathLib::Matrix::Matrix< double >( MathLib::Matrix::Preprocessor::Mean( * m_ptr ) );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * MatrixPreprocessorStandardDeviation( MathLib::Matrix::Matrix< double > * m_ptr )
{
	return new MathLib::Matrix::Matrix< double >( MathLib::Matrix::Preprocessor::StdDev( * m_ptr ) );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * MatrixPreprocessorIncreasing( MathLib::Matrix::Matrix< double > * m_ptr )
{
	return new MathLib::Matrix::Matrix< double >( MathLib::Matrix::Preprocessor::Increasing( * m_ptr ) );
}

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern "C" MATRIX_API MathLib::Matrix::Matrix< double > * MatrixPreprocessorFourier( MathLib::Matrix::Matrix< double > * m_ptr )
{
	return new MathLib::Matrix::Matrix< double >( MathLib::Matrix::Preprocessor::Fourier( * m_ptr ) );
}
