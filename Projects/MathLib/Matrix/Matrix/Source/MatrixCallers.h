///////////////////////////////////////////////////////////////////////////////////
// COPYRIGHT 2015 KovachTechnologies LLC
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. All advertising materials mentioning features or use of this software
//    must display the following acknowledgement:
//    This product includes software developed by the Kovach Technologies, LLC.
// 4. Neither the name of the Kovach Technologies, LLC nor the
//    names of its contributors may be used to endorse or promote products
//    derived from this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY Kovach Technologies, LLC AS IS AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL Kovach Technologies, LLC BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// AUTHOR : Daniel Kovach
// DATE : 2015-12-30 10:19:06.739857
///////////////////////////////////////////////////////////////////////////////////
#ifndef MATHLIB_LIBMATRIX_H
#define MATHLIB_LIBMATRIX_H

#ifdef WIN32
#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#else
#define MATRIX_API
#endif // WIN32

#include "Matrix.hpp"
#include "MatrixFunctionality.hpp"

// define "MATRIX_API_EXPORTS" from the command line in the project building this
// DLL.  DO NOT define it in the project that links to the DLL
#ifdef WIN32
        #ifdef MATRIX_API_EXPORTS
                #define MATRIX_API __declspec( dllexport )
                #define EXPORT_TEMPLATE
        #else
                #define MATRIX_API __declspec( dllimport )
                #define EXPORT_TEMPLATE extern
        #endif // MATRIX_API_EXPORTS
#pragma warning( disable:4251 )
#else
        #define MATRIX_API_EXPORTS __attribute__( ( visibility( "default" ) ) )
        #define EXPORT_TEMPLATE
#endif // WIN32

#ifdef __cplusplus

extern "C" 
{
#endif // __cplusplus

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * MatrixConstructor( void );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * MatrixConstructorFromMatrix( MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * MatrixConstructorFromArray( double *, unsigned int, unsigned int );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API void MatrixDestructor( MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API void GetMatrixFromFile( MathLib::Matrix::Matrix< double > *, const char * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API void PutMatrixToFile( MathLib::Matrix::Matrix< double > *, const char * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API unsigned int GetMatrixRows( MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API unsigned int GetMatrixColumns( MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API unsigned int GetMatrixSize( MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API double MatrixAt( MathLib::Matrix::Matrix< double > *, unsigned int, unsigned int );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API void MatrixReverse( MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API void ConvertMatrixToArray( MathLib::Matrix::Matrix< double > *, double *, unsigned int );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API void PrintMatrix( MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * AddMatrixConstant( MathLib::Matrix::Matrix< double > *, double );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * AddMatrixMatrix( MathLib::Matrix::Matrix< double > *, 
	MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * SubMatrixConstant( MathLib::Matrix::Matrix< double > *, double );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * SubMatrixMatrix( MathLib::Matrix::Matrix< double > *, 
	MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * MulMatrixConstant( MathLib::Matrix::Matrix< double > *, double );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * MulMatrixMatrix( MathLib::Matrix::Matrix< double > *, 
	MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API void MatrixAddColumns( MathLib::Matrix::Matrix< double > *, double, unsigned int, unsigned int);

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API void MatrixAddRows( MathLib::Matrix::Matrix< double > *, double, unsigned int, unsigned int);

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API double MatrixDotColumns( MathLib::Matrix::Matrix< double > *, unsigned int, unsigned int);

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API double MatrixDotRows( MathLib::Matrix::Matrix< double > *, unsigned int, unsigned int);

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API double MatrixMaxInRow( MathLib::Matrix::Matrix< double > *, unsigned int );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API double MatrixMinInRow( MathLib::Matrix::Matrix< double > *, unsigned int );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API double MatrixMaxInColumn( MathLib::Matrix::Matrix< double > *, unsigned int );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API double MatrixMinInColumn( MathLib::Matrix::Matrix< double > *, unsigned int );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * MatrixPSD( MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * MatrixDFT( MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API void MatrixNormalizeByRow( MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API void MatrixNormalizeByColumn( MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * MatrixMax( MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * MatrixMin( MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * MatrixMean( MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * MatrixStandardDeviation( MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * MatrixVariance( MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * MatrixCorrelation( MathLib::Matrix::Matrix< double > *,
	MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * MatrixCrossCorrelation( MathLib::Matrix::Matrix< double > *,
	MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * MatrixCovariance( MathLib::Matrix::Matrix< double > *,
	MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * MatrixPreprocessorNormalizeByRow( MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * MatrixPreprocessorNormalizeByColumn( MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * MatrixPreprocessorMean( MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * MatrixPreprocessorStandardDeviation( MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * MatrixPreprocessorIncreasing( MathLib::Matrix::Matrix< double > * );

///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
extern MATRIX_API MathLib::Matrix::Matrix< double > * MatrixPreprocessorFourier( MathLib::Matrix::Matrix< double > * );

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // MATHLIB_LIBMATRIX_H
