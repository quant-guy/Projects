Introduction to Genetic Algorithms

Artificial Intelligence (AI) is the branch of computer science that deals with creating intelligent agents.  It is a broad field that has been under active development since the 1950's.  There are many branches of AI including Biologically Inspired, Statistical, and more, some of which integrate many approaches.  As such, biologically inspired artificial intelligence contains many different forms of AI that mimick the process of evolution and can be applied to optimization problems.  Genetic algorithms (GA's) fall into this class.  GA's implement on a computational level, an approximation of the genetic processes found in nature.  For the purposes of this paper, when we refer to "Genetic Algorithms", it is understood that this is in the computational sense.

In their most general sense, GA's start off with some initial population.  This population represents a solution of some kind.  It could consist of a series of numbers, vectors, functions, or operations strung together in some meaningful way.  Through a series of perturbations, or mutations, subsequent generations are formed from the initial population until it is considered optimal as a solution.  This valuation is determined by what is referred to as a "fitness function".

New generations are formed by choosing elements from the existing population and applying some type of perturbation, or "mutation".  An individual could be chosen with respect to its fitness, or be chosen randomly.  The type of permutations or genetic operations used to form subsequent generations typically include:

- Reproduction - A member is selected from the population.  The individual is copied exactly, and in this sense is referred to as an "asexual operation".

- Crossover - This is also referred to as "recombination", where parts of two parents are swapped to form two offspring.  Since this involves two members of the population, it is referred to as a "sexual operation".

- Mutation - Introduces random changes in the structures of the individuals.  This could be altering the structure itself or adding pieces to it.

- Inversion - Reverses pieces of the individual between two chosen points.

- Permutation - Permutation is a generalization of inversion where k parts of the individual are shuffled in some way, either predefined or randomly, chosen from a set of k! possible configurations.

- Editing - A method by which complicated configurations within an individual may be reduced in some way, either according Boolean arithmetic or some other predefined rule set.

- Encapsulation - When a set of characteristics within an individual is sectioned off as an individual in its entirety.  This is particularly efficacious when the set of encapsulated characteristics proves to be optimal in some sense.

The above mutations (or some subset of them) are applied to population until some optimal criteria is reached, or some predefined maximum amount of iterations has been acheived.

LibGenetics

The Genetics library, "LibGenetics" is designed to be a templated object oriented library which allows for great versatility through the concept of inheritance.  Conceptually, Genetics allows one to implement complex genetic algorithms quickly and efficiently.  Using the class structures one can build their own libraries to suit their specific needs and implement them with facility.  The library contains many methods of permutation and evaluating fitness by default as well as endows the user with the functionality to create their own methods.

General concepts of LibGenetics

The following entails some of the functionality contained in the "Genetics.hpp" source file.  Through object oriented programming, the Genetics library allows the user to implement the seemingly complicated concepts from genetic programming discussed in the introduction.  First, let's look at the "ParentGenetic" structure.  This is a template class, which allows the user to form a genetic structure, or "chromosome", out of some base class, referred to as a "gene".  Again, although both of these terms have biological analogies, we are referring to them in the computational sense.

Once one has decided upon the base class and its properties, the ParentGenetic class can be used to form a chromosome.  By default, two forms of genetic mutation are included in the parent class, namely the ability to swap elements in the chromosome, and delete them.  Through another inherited class, the "PerturbationFunctor", the user is encouraged to create more mutation operations that take into account the specific properties of the base class.

Finally, when implementing genetic algorithms, one needs a manner in which to determine the fitness of the solution.  Since there is undoubtedly a wide variety of possible derivations from this class, the user may have to implement a very specific fitness function to determine the efficacy of the solution.  However, another class is provided, called "ParentFitness", to be used in aiding the user when calculating the fitness of the solution.

Advanced concepts

In very complex problems, a solution may tend to some locally optimal solution.  In this case, the solution may miss a global max or min, in essence getting "stuck" at a local one.  This is a well known shortcoming of GA's.  For cases such as these, the user may wish to employ a series of perturbations at regular intervals regardless of the fitness of the solution at hand.  Another way that the user can overcome this is to instantiate multiple chromosomes at once, each of which working on the problem at hand, and store them for further analysis, choosing the best solution at some chosen time.  Such functionality is provided in the "GeneticContainer.hpp" source file.

The "GenePair" class is a templated class, whose parameters are the base genetic structure, and its respective fitness.  The fitness is templated because, after all, the fitness may be floating point, double, or even integer valued.  The "GeneticContainer" class is essentially a container of GeneticPairs.  If a ParentFitness object is provided, the GeneticContainer can perform certain operations for the user "under the hood".  These include calculating the fitness of a solution and sorting the container with respect to the fitness of its chromosomes.

The GeneticContainer is designed to be a repository for the best solutions.  For this reason, some operations are included by default.  If the fitness function is provided the genetic container will calculate the fitness of the solution automatically.  It also has the ability to add the solution to the container by compairing its fitness with the worst solution to see if the solution belongs.  If so, the solution will be added and the worst solution removed from the container.  The total quantity of elements contained can be specified by the user.
